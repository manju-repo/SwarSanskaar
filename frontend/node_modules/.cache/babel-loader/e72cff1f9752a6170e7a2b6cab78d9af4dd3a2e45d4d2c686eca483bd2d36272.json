{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arnav\\\\IdeaProjects\\\\swarsanskaar\\\\frontend\\\\src\\\\components\\\\RegistrationForm.js\",\n  _s = $RefreshSig$();\nimport { Form, Link, useSearchParams, useActionData, useNavigate } from 'react-router-dom';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useForm, setValue } from 'react-hook-form';\nimport classes from './RegistrationForm.module.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RegistrationForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [imageName, setImageName] = useState('Choose Image...');\n  const [branches, setBranches] = useState([]); // State to hold branch names\n  const [selectedBranch, setSelectedBranch] = useState(''); // State to store selected branchId\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting\n    },\n    reset\n  } = useForm();\n  const {\n    studentId\n  } = useParams();\n  const location = useLocation();\n  const [studentDetails, setStudentDetails] = useState(null);\n  // Check if the route is for creating a new ticket\n  const isNewStudent = location.pathname === '/student/new';\n  const isEditMode = location.pathname.includes('/student/edit/');\n  console.log(studentId, isEditMode);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchBranches = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/branches'); // Adjust your endpoint\n        const data = await response.json();\n        console.log(data.branches);\n        setBranches(data.branches); // Assuming data is an array of branch names\n      } catch (error) {\n        console.error('Error fetching branches:', error);\n      }\n    };\n    const fetchStudent = async () => {\n      if (studentId) {\n        try {\n          const response = await fetch(`http://localhost:5000/students/${studentId}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          const {\n            student\n          } = await response.json();\n          console.log(student);\n          if (student) {\n            setStudentDetails(student);\n            setSelectedBranch(student.branch_id || ''); // Pre-select branch if available\n\n            reset({\n              name: student.name,\n              email: student.email,\n              phone: student.phone,\n              address: student.address,\n              monthly_fees: student.monthly_fees\n            });\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    };\n    fetchBranches();\n    fetchStudent();\n  }, []);\n  const submitHandler = async data => {\n    data.branch_id = selectedBranch;\n    console.log(data);\n    let response;\n    if (!isEditMode) {\n      response = await fetch(`http://localhost:5000/students/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n    } else {\n      response = await fetch(`http://localhost:5000/students/${studentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n    }\n    console.log(response);\n    navigate('/students');\n  };\n  const resetHandler = () => {\n    console.log(\"in reset\");\n    window.history.back();\n  };\n  const handleBranchChange = event => {\n    setSelectedBranch(event.target.value); // Set selected branchId\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(submitHandler),\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Student Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            ...register(\"name\", {\n              required: \"Student name is required.\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 12\n          }, this), errors.name && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errorMsg\",\n            children: errors.name.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"email\",\n            type: \"email\",\n            name: \"email\",\n            ...register(\"email\", {\n              required: \"Email is required.\",\n              pattern: {\n                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\n                message: \"Email is not valid.\"\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 10\n          }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errorMsg\",\n            children: errors.email.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"phone\",\n            children: \"Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"phone\",\n            type: \"text\",\n            name: \"phone\",\n            ...register(\"phone\", {\n              required: \"Phone Number is required.\",\n              minLength: {\n                value: 10,\n                message: \"Please enter a valid 10-digit phone number\"\n              },\n              maxLength: {\n                value: 10,\n                message: \"Please enter a valid 10-digit phone number\"\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), errors.phone && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errorMsg\",\n            children: errors.phone.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              minWidth: '240px'\n            },\n            htmlFor: \"address\",\n            children: \"Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'left'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"address1\",\n              name: \"address1\",\n              ...register(\"address.0\", {\n                required: \"Enter atleast one address field.\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"address2\",\n              name: \"address2\",\n              ...register(\"address.1\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"address3\",\n              name: \"address\",\n              ...register(\"address.2\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"  \", errors.address && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"errorMsg\",\n                children: errors.address.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"branch\",\n            children: \"Branch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"branch\",\n            name: \"branch\",\n            value: selectedBranch,\n            onChange: handleBranchChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a Branch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), branches && branches.map(branch => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: branch._id,\n              children: branch.branch_name\n            }, branch._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), errors.branch && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errorMsg\",\n            children: errors.branch.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"monthly_fees\",\n            children: \"Monthly Fees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"monthly_fees\",\n            type: \"text\",\n            name: \"monthly_fees\",\n            ...register(\"monthly_fees\", {\n              required: \"PLease enter the fees for this student\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this), errors.monthly_fees && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errorMsg\",\n            children: errors.monthly_fees.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button,\n          type: \"reset\",\n          onClick: resetHandler,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button,\n          type: \"submit\",\n          children: isSubmitting ? 'Submitting' : 'Proceed'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 1\n  }, this);\n};\n_s(RegistrationForm, \"GhnDST4+EVh8uZl8oW6G9SAohIE=\", false, function () {\n  return [useForm, useParams, useLocation, useNavigate];\n});\n_c = RegistrationForm;\nexport default RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["Form","Link","useSearchParams","useActionData","useNavigate","useLocation","useParams","useForm","setValue","classes","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","RegistrationForm","onSubmit","_s","imageName","setImageName","branches","setBranches","selectedBranch","setSelectedBranch","register","handleSubmit","formState","errors","isSubmitting","reset","studentId","location","studentDetails","setStudentDetails","isNewStudent","pathname","isEditMode","includes","console","log","navigate","fetchBranches","response","fetch","data","json","error","fetchStudent","method","headers","student","branch_id","name","email","phone","address","monthly_fees","submitHandler","body","JSON","stringify","resetHandler","window","history","back","handleBranchChange","event","target","value","className","container","children","form","control","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","required","message","pattern","minLength","maxLength","style","minWidth","textAlign","onChange","map","branch","_id","branch_name","marginTop","button","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Arnav/IdeaProjects/swarsanskaar/frontend/src/components/RegistrationForm.js"],"sourcesContent":["import {\r\n  Form,\r\n  Link,\r\n  useSearchParams,\r\n  useActionData,\r\n  useNavigate\r\n} from 'react-router-dom';\r\nimport {useLocation, useParams} from 'react-router-dom';\r\nimport { useForm, setValue } from 'react-hook-form';\r\nimport classes from './RegistrationForm.module.css';\r\nimport {useState, useEffect} from 'react';\r\n\r\nconst RegistrationForm=({onSubmit})=>{\r\n    const [imageName, setImageName] = useState('Choose Image...');\r\n    const [branches, setBranches] = useState([]); // State to hold branch names\r\n    const [selectedBranch, setSelectedBranch] = useState(''); // State to store selected branchId\r\n\r\n\r\nconst {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    reset\r\n  } = useForm();\r\n\r\n    const { studentId } = useParams();\r\n    const location = useLocation();\r\n    const [studentDetails,setStudentDetails] =useState(null);\r\n// Check if the route is for creating a new ticket\r\n    const isNewStudent = location.pathname === '/student/new';\r\n    const isEditMode=location.pathname.includes('/student/edit/');\r\n    console.log(studentId, isEditMode);\r\n    const navigate= useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchBranches = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/branches'); // Adjust your endpoint\r\n        const data = await response.json();\r\n        console.log(data.branches);\r\n        setBranches(data.branches); // Assuming data is an array of branch names\r\n      } catch (error) {\r\n        console.error('Error fetching branches:', error);\r\n      }\r\n    };\r\n\r\n    const fetchStudent=async()=>\r\n    {\r\n     if(studentId){\r\n      try{\r\n           const response=await fetch(`http://localhost:5000/students/${studentId}`,{\r\n                 method:'GET',\r\n                 headers:{\r\n                     'Content-Type':'application/json',\r\n                     }\r\n                 });\r\n\r\n           const {student}=await response.json();\r\n           console.log(student);\r\n           if (student) {\r\n              setStudentDetails(student);\r\n            setSelectedBranch(student.branch_id || ''); // Pre-select branch if available\r\n\r\n               reset({\r\n                  name: student.name,\r\n                  email: student.email,\r\n                  phone: student.phone,\r\n                  address:student.address,\r\n                  monthly_fees:student.monthly_fees\r\n               });\r\n           }\r\n       }\r\n       catch(error){\r\n           console.log(error);\r\n       }\r\n       }\r\n      };\r\n      fetchBranches();\r\n      fetchStudent();\r\n    }, []);\r\n\r\n\r\n\r\n  const submitHandler =async (data) => {\r\n    data.branch_id = selectedBranch;\r\n    console.log(data);\r\n    let response;\r\n    if(!isEditMode){\r\n          response= await fetch(`http://localhost:5000/students/register`, {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify(data)\r\n         });\r\n     }\r\n     else{\r\n          response= await fetch(`http://localhost:5000/students/${studentId}`, {\r\n          method: 'PUT',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify(data)\r\n         });\r\n      }\r\n      console.log(response);\r\n      navigate('/students');\r\n  };\r\n\r\n\r\n   const resetHandler=()=>{\r\n        console.log(\"in reset\");\r\nwindow.history.back();   };\r\n\r\n\r\n    const handleBranchChange = (event) => {\r\n         setSelectedBranch(event.target.value); // Set selected branchId\r\n    };\r\n\r\n   return (\r\n<div className={classes.container}>\r\n     <form onSubmit={handleSubmit(submitHandler)} className={classes.form}>\r\n        <>\r\n\r\n         <div className={classes.control}>\r\n           <label htmlFor=\"name\">Student Name</label>\r\n           <input type=\"text\" id=\"name\" name=\"name\"\r\n             {...register(\"name\", { required: \"Student name is required.\" })}  />\r\n          {errors.name && <p className=\"errorMsg\">{errors.name.message}</p>}\r\n         </div>\r\n\r\n        <div className={classes.control}>\r\n         <label htmlFor=\"email\">Email</label>\r\n         <input id=\"email\" type=\"email\" name=\"email\"\r\n         {...register(\"email\", {\r\n               required: \"Email is required.\",\r\n               pattern: {\r\n                 value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n                 message: \"Email is not valid.\"\r\n               }\r\n             })}\r\n           />\r\n         {errors.email && <p className=\"errorMsg\">{errors.email.message}</p>}\r\n       </div>\r\n\r\n\r\n         <div className={classes.control}>\r\n            <label htmlFor=\"phone\">Phone</label>\r\n            <input\r\n              id=\"phone\"\r\n              type=\"text\"\r\n              name=\"phone\"\r\n               {...register(\"phone\", { required: \"Phone Number is required.\",\r\n                minLength: {\r\n                              value: 10,\r\n                              message: \"Please enter a valid 10-digit phone number\"\r\n                            },\r\n                maxLength: {\r\n                              value: 10,\r\n                              message: \"Please enter a valid 10-digit phone number\"\r\n                            }\r\n                            })}\r\n            />\r\n            {errors.phone && (\r\n                 <p className=\"errorMsg\">{errors.phone.message}</p>)}\r\n          </div>\r\n\r\n\r\n          <div className={classes.control}>\r\n            <label style={{minWidth:'240px'}} htmlFor=\"address\">Address</label>\r\n            <div style={{textAlign:'left'}}>\r\n                  <input  type=\"text\" id=\"address1\" name=\"address1\" {...register(\"address.0\",{ required: \"Enter atleast one address field.\" })} />\r\n                   <input type=\"text\" id=\"address2\" name=\"address2\" {...register(\"address.1\")} />\r\n                   <input type=\"text\" id=\"address3\" name=\"address\" {...register(\"address.2\")} />\r\n                   <div>  {errors.address && (<p className=\"errorMsg\">{errors.address.message}</p>)}</div>\r\n          </div>\r\n          </div>\r\n\r\n        <div className={classes.control}>\r\n              <label htmlFor=\"branch\">Branch</label>\r\n              <select\r\n                id=\"branch\"\r\n                name=\"branch\" value={selectedBranch} onChange={handleBranchChange}\r\n              >\r\n                <option value=\"\">Select a Branch</option>\r\n                {branches && branches.map((branch) => (\r\n                  <option key={branch._id} value={branch._id}>\r\n                    {branch.branch_name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.branch && <p className=\"errorMsg\">{errors.branch.message}</p>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n                <label htmlFor=\"monthly_fees\">Monthly Fees</label>\r\n                <input\r\n                  id=\"monthly_fees\"\r\n                  type=\"text\"\r\n                  name=\"monthly_fees\"\r\n                   {...register(\"monthly_fees\", { required: \"PLease enter the fees for this student\"})}\r\n                />\r\n                {errors.monthly_fees && (\r\n                     <p className=\"errorMsg\">{errors.monthly_fees.message}</p>)}\r\n              </div>\r\n      </>\r\n\r\n       <div style={{marginTop:'20px'}}>\r\n         <button className={classes.button} type=\"reset\" onClick={resetHandler}>\r\n           Cancel\r\n         </button>\r\n         <button className={classes.button} type=\"submit\" >\r\n           {isSubmitting? 'Submitting': 'Proceed'}\r\n         </button>\r\n        </div>\r\n\r\n\r\n     </form>\r\n    </div>\r\n\r\n   )\r\n\r\n}\r\nexport default RegistrationForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}